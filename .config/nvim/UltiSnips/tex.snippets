global !p
def blank_array(whitespace, env_name, rows, cols, spec=False):
	begin = '\\begin{{{}}}'.format(env_name)
	if spec:
		begin += '{{{}}}'.format(' '.join('c' for _ in range(cols)))
	begin += '\n'

	end = whitespace + '\\end{{{}}}'.format(env_name)

	grid = ' \\\\\\\\\n'.join([
		whitespace + '\t' + ' & '.join(
			'<++>' for _ in range(cols)
		) for __ in range(rows)
	])

	return begin + whitespace + '\t${0:<++>}' + grid[len(whitespace) + 5:] + '\n' + end

def create_grid_general(snip, env_name, spec=True):
	line = snip.buffer[snip.line]
	whitespace = line[:len(line) - len(line.lstrip())]

	*before, dims = line.split(env_name)
	before = env_name.join(before)
	rows, cols = map(int, dims.split(':')[0].split('x'))

	after = line.split('::')[-1]
	snip.buffer[snip.line] = ''

	snip.expand_anon(before + blank_array(whitespace, env_name, rows, cols, spec=spec) + after)

def create_grid_matrix(snip):
	line = snip.buffer[snip.line]
	*prefix, dims = line.split('matrix')
	prefix = matrix.join(prefix)
	env_name = prefix.split(' ')[-1].strip() + 'matrix'
	create_grid_general(snip, env_name, spec=False)
endglobal

snippet ... "dots" Ai
\dots
endsnippet

snippet == "align equals" iA
&=
endsnippet

snippet '(\S|^)\^\^' "superscript" rAi
`!p snip.rv = match.group(1)`^{$1}${0:<++>}
endsnippet

snippet '(\S|^)__' "subscript" rAi
`!p snip.rv = match.group(1)`_{$1}${0:<++>}
endsnippet

snippet () "parens" Ai
(${1:${VISUAL:<++>}})${0:<++>}
endsnippet

snippet [] "brackets" Ai
[${1:${VISUAL:<++>}}]${0:<++>}
endsnippet

snippet "{}" "braces" rAi
{${1:${VISUAL:<++>}}}${0:<++>}
endsnippet

snippet $$ "Inline math dollars" Ai
\(${1:${VISUAL:<++>}}\)${0:<++>}
endsnippet

snippet \( "Inline math parens" "len(snip.buffer[snip.line]) == snip.column + 1" Ae
\(${1:${VISUAL:<++>}}\)${0:<++>}
endsnippet

snippet "\\\[ " "Display math" "len(snip.buffer[snip.line]) == snip.column + 1" rAe
\[
	${1:${VISUAL}}
\]
${0:<++>}
endsnippet

snippet sec:: "Section" A
\section{${1:sec}}
endsnippet

snippet Sec:: "Starred section" A
\section*{${1:sec}}
endsnippet

snippet ssec:: "Subsection" A
\subsection{${1:sec}}
endsnippet

snippet SSec:: "Starred subsection" A
\subsection*{${1:sec}}
endsnippet

snippet sssec:: "Subsubsection" A
\subsubsection{${1:sec}}
endsnippet

snippet SSSec:: "Starred Subsubsection" A
\subsubsection*{${1:sec}}
endsnippet

snippet "\\?begin::" "General environment" rA
\begin{${1:env}}
	${0:<++>}
\end{$1}
endsnippet

snippet "(Equation|Align|Gather)::" "eqn environments" rA
\begin{`!p snip.rv = match.group(1).lower()`}
	${0:${VISUAL}}
\end{`!p snip.rv = match.group(1).lower()`}
endsnippet

snippet "(equation|align|gather)::" "nonnumbered eqn environments" rA
\begin{`!p snip.rv = match.group(1) + '*'`}
	${0:${VISUAL}}
\end{`!p snip.rv = match.group(1)+ '*'`}
endsnippet

snippet array:: "array" A
\begin{array}{$1}
	${2:<++>}
\end{array}
endsnippet

snippet "(tabular|tab)::" "tabular" rA
\begin{tabular}{$1}
	${2:<++>}
\end{tabular}
endsnippet

snippet "((small|b|p)?matrix)::" "matrix environments" rA
\begin{`!p snip.rv = match.group(1)`}
	$1
\end{`!p snip.rv = match.group(1)`}
endsnippet

pre_expand "create_grid_matrix(snip)"
snippet "((small|b|p)?matrix)(\d+)x(\d+)::" "Generate matrix with placeholders" rA
endsnippet

pre_expand "create_grid_general(snip, 'tabular')"
snippet "(tabular)(\d+)x(\d+)::" "Generate tabular with placeholders" rA
endsnippet

pre_expand "create_grid_general(snip, 'array')"
snippet "(array)(\d+)x(\d+)::" "Generate array with placeholders" rA
endsnippet

snippet frame:: "frame" A
\begin{frame}{${1:<+title+>}}
	${2:<++>}
\end{frame}
endsnippet

snippet fframe:: "fragile frame" A
\begin{frame}{${1:<+title+>}}[fragile]
	${2:<++>}
\end{frame}
endsnippet

snippet minipage:: "minipage" A
\begin{minipage}{${1:<+size+>}}
	${2:<++>}
\end{minipage}
endsnippet

snippet "fig(ure)?::" "figure" rA
\begin{figure}[tbp!]
	${0:${VISUAL}}
\end{figure}
endsnippet

snippet "subfig(ure)?::" "subfigure" rA
\begin{subfigure}[c]{${1:<+size+>}}
	${2:<++>}
\end{subfigure}
endsnippet

snippet enum:: "enumerate" A
\begin{enumerate}
	\item ${0:${VISUAL:<++>}}
\end{enumerate}
endsnippet

snippet desc:: "description" A
\begin{description}
	\item ${0:${VISUAL:<++>}}
\end{description}
endsnippet

snippet itemize:: "itemize" A
\begin{itemize}
	\item ${0:${VISUAL:<++>}}
\end{itemize}
endsnippet

snippet "(scope|center|asy)::" "environments" rA
\begin{`!p snip.rv = match.group(1)`}
	${0:${VISUAL:<++>}}
\end{`!p snip.rv = match.group(1)`}
endsnippet

snippet tikz:: "tikz" A
\begin{tikzpicture}
	${0:${VISUAL}}
\end{tikzpicture}
endsnippet

snippet cases:: "cases environments" A
\begin{cases}
	${1:${VISUAL:<++>}} & ${2:<++>}
\end{cases}
endsnippet

### DELIMITERS ###
snippet "\.(braces|parens|brackets|angles|verts|Verts|floor|ceil|set|abs|size|norm|tuple)" "autosize delimiters" rA
\\`!p snip.rv = match.group(1)`*{${1:${VISUAL:<++>}}}${0:<++>}
endsnippet

### THEOREM ENVIRONMENTS ###
snippet "(Theorem|Lemma|Proposition|Corollary|Conjecture|Definition|Fact|Exercise|Problem|Question|Answer|Remark|Case|Claim|Example|Proof|Solution|Algorithm|Note)::" "proof enivonments" rA
\begin{`!p snip.rv = match.group(1).lower()`}
	${0:${VISUAL}}
\end{`!p snip.rv = match.group(1).lower()`}
endsnippet

snippet "Def(n)?::" "definition enivonment abbreviation" rA
\begin{definition}
	${0:${VISUAL:<++>}}
\end{definition}
endsnippet

snippet Ex:: "example enivonment abbreviation" A
\begin{example}
	${0:${VISUAL:<++>}}
\end{example}
endsnippet

snippet Thm:: "theorem enivonment abbreviation" A
\begin{theorem}
	${0:${VISUAL:<++>}}
\end{theorem}
endsnippet

snippet Lem:: "lemma enivonment abbreviation" A
\begin{lemma}
	${0:${VISUAL:<++>}}
\end{lemma}
endsnippet

snippet Prop:: "proposition enivonment abbreviation" A
\begin{proposition}
	${0:${VISUAL:<++>}}
\end{proposition}
endsnippet

snippet Conj:: "conjecture enivonment abbreviation" A
\begin{conjecture}
	${0:${VISUAL:<++>}}
\end{conjecture}
endsnippet

snippet Cor:: "corollary enivonment abbreviation" A
\begin{corollary}
	${0:${VISUAL:<++>}}
\end{corollary}
endsnippet

snippet Sol:: "solution enivonment abbreviation" A
\begin{proof*}{Solution}
	${0:${VISUAL:<++>}}
\end{proof*}
endsnippet

snippet Algo:: "algorithm enivonment abbreviation" A
\begin{algorithm}
	${0:${VISUAL}}
\end{algorithm}
endsnippet

### MATH SNIPPETS ###
snippet "({.*?}|(\w|\\|\^)*)\/\/" "fraction" wrA
`!p
if match.group(2) != None:
	snip.rv = "\\frac{" + match.group(1) + "}"
else:
	result = ""
	remainder = ""
	level = 0
	done = False
	for c in reversed(match.group(1)):
		if done:
			remainder = c + remainder
			continue
		result = c + result
		if c == "}":
			level += 1
		elif c == "{":
			level -= 1
		if level == 0:
			done = True
	snip.rv = remainder + '\\frac' + result
`{${2:<++>}}${0:<++>}
endsnippet

snippet "\.t(-?(1|2|3|4)|5)" "text sizes" rA
`!p
text_sizes = {
	-4: "\\tiny",
	-3: "\\scriptsize",
	-2: "\\footnotesize",
	-1: "\\small",
	1: "\\large",
	2: "\\Large",
	3: "\\LARGE",
	4: "\\huge",
	5: "\\Huge"
}
snip.rv = text_sizes[int(match.group(1))]
`
endsnippet

snippet "\.d(1|2|3|4)" "delimiter sizes" rA
`!p
delim_sizes = {
	1: "\\big",
	2: "\\Big",
	3: "\\bigg",
	4: "\\Bigg"
}
snip.rv = delim_sizes[int(match.group(1))]
`
endsnippet

snippet tikzcd:: "commutative diagrams" A
\begin{tikzcd}
	${0:${VISUAL}}
\end{tikzcd}
endsnippet

### OTHER SNIPPETS ###
snippet alg:: "pseudocode" A
\begin{algorithmic}
	${0:${VISUAL}}
\end{algorithmic}
endsnippet

snippet code:: "code" A
\begin{algorithm}
	${0:${VISUAL}}
\end{algorithm}
endsnippet

snippet .date "today's date" Ai
`date "+%B %d, %Y"`
endsnippet

# Cool things taken from https://castel.dev/post/lecture-notes-1/
snippet 'mathematica::' "mathematica" Ari
mathematica>> $1 <<endmathematica$0
endsnippet

snippet 'mathematica>>(.*)<<endmathematica::' "run mathematica" Awr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
process = subprocess.run(['wolframscript', '-code', code], stdout=subprocess.PIPE)
snip.rv = process.stdout.decode('utf-8')[:-1]
`
endsnippet
