global !p
def create_grid(snip):
	line = snip.buffer[snip.line]
	whitespace = line[:len(line) - len(line.lstrip())]

	env_name, dims = line.split('matrix')
	env_name = env_name.split(' ')[-1].strip() + 'matrix'
	rows, cols = map(int, dims.split(':')[0].split('x'))

	before = line.split(env_name)[0]
	after = line.split('::')[-1]
	snip.buffer[snip.line] = ''

	begin = '\\begin{' + env_name + '}\n'
	end = whitespace + '\\end{' + env_name + '}'

	grid = ' \\\\\\\\\n'.join([
		whitespace + '\t' + ' & '.join([
			'<++>' for _ in range(cols)
		]) for __ in range(rows)
	])

	snip.expand_anon(before + begin + whitespace + '\t' + '${0:<++>}' + grid[len(whitespace) + 5:] + '\n' + end + after)
endglobal

snippet ... "dots" Ai
\dots
endsnippet

snippet == "align equals" iA
&=
endsnippet

snippet '(\S|^)\^\^' "superscript" rAi
`!p snip.rv = match.group(1)`^{$1}${0:<++>}
endsnippet

snippet '(\S|^)__' "subscript" rAi
`!p snip.rv = match.group(1)`_{$1}${0:<++>}
endsnippet

snippet () "parens" Ai
(${1:${VISUAL}})${0:<++>}
endsnippet

snippet [] "brackets" Ai
[${1:${VISUAL}}]${0:<++>}
endsnippet

snippet "{}" "braces" rA
{${1:${VISUAL}}}${0:<++>}
endsnippet

snippet "\$\$" "Inline math dollars" rA
\(${1:${VISUAL}}\)${0:<++>}
endsnippet

snippet "\\\(" "Inline math parens" "len(snip.buffer[snip.line]) == snip.column + 1" rAe
\(${1:${VISUAL}}\)${0:<++>}
endsnippet

snippet "\\\[ " "Display math" "len(snip.buffer[snip.line]) == snip.column + 1" rAe
\[
	${1:${VISUAL}}
\]
endsnippet

snippet "\\begin::" "General environment" rA
\begin{${1:env}}
	${0:<++>}
\end{$1}
endsnippet

snippet "(Equation|Align|Gather)::" "eqn environments" rA
\begin{`!p snip.rv = match.group(1).lower()`}
	$1
\end{`!p snip.rv = match.group(1).lower()`}
endsnippet

snippet "(equation|align|gather)::" "nonnumbered eqn environments" rA
\begin{`!p snip.rv = match.group(1) + '*'`}
	$1
\end{`!p snip.rv = match.group(1)+ '*'`}
endsnippet

snippet "array::" "array" rA
\begin{array}{$1}
	${2:<++>}
\end{array}
endsnippet

snippet "(tabular|tab)::" "tabular" rA
\begin{tabular}{$1}
	${2:<++>}
\end{tabular}
endsnippet

snippet "((small|b|p)?matrix)::" "matrix environments" rA
\begin{`!p snip.rv = match.group(1)`}
	$1
\end{`!p snip.rv = match.group(1)`}
endsnippet

#post_jump "if snip.tabstop == 0: create_row_placeholders(snip)"
#snippet "(matrix|smallmatrix|bmatrix|pmatrix)(\d+)::" "matrix environments" rA
#\begin{`!p snip.rv = match.group(1)`}
#	`!p snip.expand_anon("${1:<++>} ${2:<++>} ${3:<++>}")`
#\end{`!p snip.rv = match.group(1)`}
#endsnippet
pre_expand "create_grid(snip)"
snippet "((small|b|p)?matrix)(\d+)x(\d+)::" "Generate matrix with placeholders" rA
endsnippet

snippet "frame::" "frame" rA
\begin{frame}{${1:<+title+>}}
	${2:<++>}
\end{frame}
endsnippet

snippet "fframe::" "fragile frame" rA
\begin{frame}{${1:<+title+>}}[fragile]
	${2:<++>}
\end{frame}
endsnippet

snippet "minipage::" "minipage" rA
\begin{minipage}{${1:<+size+>}}
	${2:<++>}
\end{minipage}
endsnippet

snippet "(fig|figure)::" "figure" rA
\begin{figure}[tbp]
	${0:${VISUAL}}
\end{figure}
endsnippet

snippet "(subfig|subfigure)::" "subfigure" rA
\begin{subfigure}[c]{${1:<+size+>}}
	${2:<++>}
\end{subfigure}
endsnippet

snippet "enum::" "enumerate" rA
\begin{enumerate}
	\item ${0:${VISUAL}}
\end{enumerate}
endsnippet

snippet "desc::" "description" rA
\begin{description}
	\item ${0:${VISUAL}}
\end{description}
endsnippet

snippet "(cases|itemize|scope)::" "environments" rA
\begin{`!p snip.rv = match.group(1)`}
	${0:${VISUAL}}
\end{`!p snip.rv = match.group(1)`}
endsnippet

snippet "tikz::" "tikz environments" rA
\begin{tikzpicture}
	${0:${VISUAL}}
\end{tikzpicture}
endsnippet

snippet "(center|asy)::" "standard text environments" rA
\begin{`!p snip.rv = match.group(1)`}
	${0:${VISUAL}}
\end{`!p snip.rv = match.group(1)`}
endsnippet

### DELIMITERS ###
snippet "\.(braces|parens|brackets|angles|verts|Verts|floor|ceil|set|abs|size|norm|tuple)" "autosize delimiters" rA
\\`!p snip.rv = match.group(1)`*{${1:${VISUAL}}}${0:<++>}
endsnippet

### THEOREM ENVIRONMENTS ###
snippet "(Theorem|Lemma|Proposition|Corollary|Conjecture|Definition|Fact|Exercise|Problem|Qestion|Answer|Remark|Case|Claim|Example|Proof|Question|Solution|Algorithm|Note)::" "proof enivonments" rA
\begin{`!p snip.rv = match.group(1).lower()`}
	${0:${VISUAL}}
\end{`!p snip.rv = match.group(1).lower()`}
endsnippet

snippet "(Def|Defn)::" "definition enivonment abbreviation" rA
\begin{definition}
	${0:${VISUAL}}
\end{definition}
endsnippet

snippet "Ex::" "example enivonment abbreviation" rA
\begin{example}
	${0:${VISUAL}}
\end{example}
endsnippet

snippet "Thm::" "theorem enivonment abbreviation" rA
\begin{theorem}
	${0:${VISUAL}}
\end{theorem}
endsnippet

snippet "Lem::" "lemma enivonment abbreviation" rA
\begin{lemma}
	${0:${VISUAL}}
\end{lemma}
endsnippet

snippet "Prop::" "proposition enivonment abbreviation" rA
\begin{proposition}
	${0:${VISUAL}}
\end{proposition}
endsnippet

snippet "Conj::" "conjecture enivonment abbreviation" rA
\begin{conjecture}
	${0:${VISUAL}}
\end{conjecture}
endsnippet

snippet "Cor::" "corollary enivonment abbreviation" rA
\begin{corollary}
	${0:${VISUAL}}
\end{corollary}
endsnippet

snippet "Sol::" "solution enivonment abbreviation" rA
\begin{solution}
	${0:${VISUAL}}
\end{solution}
endsnippet

snippet "Algo::" "algorithm enivonment abbreviation" rA
\begin{algorithm}
	${0:${VISUAL}}
\end{algorithm}
endsnippet

### MATH SNIPPETS ###
snippet "({.*?}|(\w|\\|\^)*)\/\/" "fraction" wrA
`!p
if match.group(2) != None:
	snip.rv = "\\frac{" + match.group(1) + "}"
else:
	result = ""
	remainder = ""
	level = 0
	done = False
	for c in reversed(match.group(1)):
		if done:
			remainder = c + remainder
			continue
		result = c + result
		if c == "}":
			level += 1
		elif c == "{":
			level -= 1
		if level == 0:
			done = True
	snip.rv = remainder + '\\frac' + result
`{${2:<++>}}${0:<++>}
endsnippet

snippet / "fraction" i
\\frac{${VISUAL}}{${2:<++>}}${0:<++>}
endsnippet

snippet .frac "fraction" A
\frac{${1}}{${2:<++>}}${0:<++>}
endsnippet

snippet "\.(dv|ddv|pdv|pddv)" "derivatives" rA
\\`!p snip.rv = match.group(1)`{${1:${VISUAL}}}{${2:<++>}}${0:<++>}
endsnippet

snippet "\.(dnv|pdnv)" "nth derivatives" rA
\\`!p snip.rv = match.group(1)`{${1:${VISUAL}}}{${2:<++>}}{${3:<++>}}${0:<++>}
endsnippet

snippet tikzcd:: "commutative diagrams" A
\begin{tikzcd}
	${0:${VISUAL}}
\end{tikzcd}
endsnippet

### OTHER SNIPPETS ###
snippet "alg::" "pseudocode" rA
\begin{algorithm}
	${0:${VISUAL}}
\end{algorithm}
endsnippet

snippet "code::" "code" rA
\begin{algorithm}
	${0:${VISUAL}}
\end{algorithm}
endsnippet

snippet .date "today's date" Ai
`date "+%B %d, %Y"`
endsnippet

# Cool things taken from https://castel.dev/post/lecture-notes-1/
snippet '([^<]|^)mathematica' "mathematica" wr
`!p snip.rv = match.group(1)`mathematica> $1 <mathematica$0
endsnippet

snippet 'mathematica>(.*)<mathematica' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet
